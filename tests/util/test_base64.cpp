/* Copyright 2013–2017 Kullo GmbH. All rights reserved. */
#include <kulloclient/util/base64.h>
#include <kulloclient/util/binary.h>

#include "tests/kullotest.h"

using namespace testing;
using namespace Kullo;

class Base64 : public KulloTest
{
};

K_TEST_F(Base64, encodeEmptyString)
{
    // common knowledge
    EXPECT_THAT(Util::Base64::encode(""), StrEq(""));
}

K_TEST_F(Base64, encodeShortString)
{
    // test vectors from http://tools.ietf.org/html/rfc4648
    EXPECT_THAT(Util::Base64::encode("f"), StrEq("Zg=="));
    EXPECT_THAT(Util::Base64::encode("fo"), StrEq("Zm8="));
    EXPECT_THAT(Util::Base64::encode("foo"), StrEq("Zm9v"));
}

K_TEST_F(Base64, encodeString)
{
    // Generated by: echo -n "xyz" | base64
    EXPECT_THAT(Util::Base64::encode("hello world"), StrEq("aGVsbG8gd29ybGQ="));
    EXPECT_THAT(Util::Base64::encode("hello world!"), StrEq("aGVsbG8gd29ybGQh"));
    EXPECT_THAT(Util::Base64::encode("Hello, world."), StrEq("SGVsbG8sIHdvcmxkLg=="));

    EXPECT_THAT(Util::Base64::encode("The 12 chars"),    StrEq("VGhlIDEyIGNoYXJz"));
    EXPECT_THAT(Util::Base64::encode("The 13 chars."),   StrEq("VGhlIDEzIGNoYXJzLg=="));
    EXPECT_THAT(Util::Base64::encode("The 14 chars.."),  StrEq("VGhlIDE0IGNoYXJzLi4="));
    EXPECT_THAT(Util::Base64::encode("The 15 chars..."), StrEq("VGhlIDE1IGNoYXJzLi4u"));
}

K_TEST_F(Base64, encodeStringSpecialChars)
{
    // Generated by: echo -n "xyz" | base64
    EXPECT_THAT(Util::Base64::encode("An UTF-8 uuml: ü"), StrEq("QW4gVVRGLTggdXVtbDogw7w="));
    EXPECT_THAT(Util::Base64::encode("Weird German 2 byte thing: ß."), StrEq("V2VpcmQgR2VybWFuIDIgYnl0ZSB0aGluZzogw58u"));
}

K_TEST_F(Base64, encodeEmptyBinary)
{
    auto binary0 = std::vector<unsigned char>{};
    EXPECT_THAT(Util::Base64::encode(binary0), Eq(""));
}

K_TEST_F(Base64, encodeBinary)
{
    // Generated by: cat /dev/urandom | head -c 3 | tee /tmp/mybinary | hexdump -C && cat /tmp/mybinary | base64
    std::vector<unsigned char> binary1 = {0x9b};
    EXPECT_THAT(Util::Base64::encode(binary1), StrEq("mw=="));

    std::vector<unsigned char> binary2 = {0x1c, 0x60};
    EXPECT_THAT(Util::Base64::encode(binary2), StrEq("HGA="));

    std::vector<unsigned char> binary3 = {0x81, 0x34, 0xbd};
    EXPECT_THAT(Util::Base64::encode(binary3), StrEq("gTS9"));

    std::vector<unsigned char> binary4 = {0x5e, 0x6c, 0xff, 0xde};
    EXPECT_THAT(Util::Base64::encode(binary4), StrEq("Xmz/3g=="));

    std::vector<unsigned char> binary5 = {0xb2, 0xcd, 0xf0, 0xdc, 0x7f};
    EXPECT_THAT(Util::Base64::encode(binary5), StrEq("ss3w3H8="));

    std::vector<unsigned char> binary6 = {0xfc, 0x56, 0x2d, 0xda, 0xd4, 0x0e};
    EXPECT_THAT(Util::Base64::encode(binary6), StrEq("/FYt2tQO"));

    std::vector<unsigned char> binary7 = {0x29, 0xb2, 0x32, 0x2e, 0x88, 0x41, 0xe8};
    EXPECT_THAT(Util::Base64::encode(binary7), StrEq("KbIyLohB6A=="));

    std::vector<unsigned char> binary8 = {0x0f, 0x0f, 0xce, 0xd9, 0x49, 0x7a, 0xaf, 0x92};
    EXPECT_THAT(Util::Base64::encode(binary8), StrEq("Dw/O2Ul6r5I="));

    std::vector<unsigned char> binary9 = {0x27, 0x0f, 0xb1, 0x89, 0x82, 0x80, 0x0d, 0xa6, 0x40};
    EXPECT_THAT(Util::Base64::encode(binary9), StrEq("Jw+xiYKADaZA"));
}

K_TEST_F(Base64, decodeEmptyString)
{
    // common knowledge
    EXPECT_THAT(Util::Base64::decode(""), Eq(Util::to_vector("")));
}

K_TEST_F(Base64, decodeShortString)
{
    // test vectors from http://tools.ietf.org/html/rfc4648
    EXPECT_THAT(Util::Base64::decode("Zg=="), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("Zm8="), Eq(Util::to_vector("fo")));
    EXPECT_THAT(Util::Base64::decode("Zm9v"), Eq(Util::to_vector("foo")));
}

K_TEST_F(Base64, decodeShortStringIgnoreWhitespace)
{
    EXPECT_THAT(Util::Base64::decode(" Zg=="), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("Z g=="), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("Zg =="), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("Zg= ="), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("Zg== "), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("\nZg=="), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("Z\ng=="), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("Zg\n=="), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("Zg=\n="), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("Zg==\n"), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("\rZg=="), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("Z\rg=="), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("Zg\r=="), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("Zg=\r="), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("Zg==\r"), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("\tZg=="), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("Z\tg=="), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("Zg\t=="), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("Zg=\t="), Eq(Util::to_vector("f")));
    EXPECT_THAT(Util::Base64::decode("Zg==\t"), Eq(Util::to_vector("f")));
}

K_TEST_F(Base64, decodeString)
{
    // Generated by: echo -n "xyz" | base64
    EXPECT_THAT(Util::Base64::decode("aGVsbG8gd29ybGQ="),     Eq(Util::to_vector("hello world")));
    EXPECT_THAT(Util::Base64::decode("aGVsbG8gd29ybGQh"),     Eq(Util::to_vector("hello world!")));
    EXPECT_THAT(Util::Base64::decode("SGVsbG8sIHdvcmxkLg=="), Eq(Util::to_vector("Hello, world.")));

    EXPECT_THAT(Util::Base64::decode("VGhlIDEyIGNoYXJz"),     Eq(Util::to_vector("The 12 chars")));
    EXPECT_THAT(Util::Base64::decode("VGhlIDEzIGNoYXJzLg=="), Eq(Util::to_vector("The 13 chars.")));
    EXPECT_THAT(Util::Base64::decode("VGhlIDE0IGNoYXJzLi4="), Eq(Util::to_vector("The 14 chars..")));
    EXPECT_THAT(Util::Base64::decode("VGhlIDE1IGNoYXJzLi4u"), Eq(Util::to_vector("The 15 chars...")));
}

K_TEST_F(Base64, decodeStringSpecialChars)
{
    // Generated by: echo -n "xyz" | base64
    EXPECT_THAT(Util::Base64::decode("QW4gVVRGLTggdXVtbDogw7w="), Eq(Util::to_vector("An UTF-8 uuml: ü")));
    EXPECT_THAT(Util::Base64::decode("V2VpcmQgR2VybWFuIDIgYnl0ZSB0aGluZzogw58u"), Eq(Util::to_vector("Weird German 2 byte thing: ß.")));
}

K_TEST_F(Base64, decodeBinary)
{
    // Generated by: cat /dev/urandom | head -c 3 | tee /tmp/mybinary | hexdump -C && cat /tmp/mybinary | base64
    std::vector<unsigned char> binary0 = {};
    EXPECT_THAT(Util::Base64::decode(""), Eq(binary0));

    std::vector<unsigned char> binary1 = {0x9b};
    EXPECT_THAT(Util::Base64::decode("mw=="), Eq(binary1));

    std::vector<unsigned char> binary2 = {0x1c, 0x60};
    EXPECT_THAT(Util::Base64::decode("HGA="), Eq(binary2));

    std::vector<unsigned char> binary3 = {0x81, 0x34, 0xbd};
    EXPECT_THAT(Util::Base64::decode("gTS9"), Eq(binary3));

    std::vector<unsigned char> binary4 = {0x5e, 0x6c, 0xff, 0xde};
    EXPECT_THAT(Util::Base64::decode("Xmz/3g=="), Eq(binary4));

    std::vector<unsigned char> binary5 = {0xb2, 0xcd, 0xf0, 0xdc, 0x7f};
    EXPECT_THAT(Util::Base64::decode("ss3w3H8="), Eq(binary5));

    std::vector<unsigned char> binary6 = {0xfc, 0x56, 0x2d, 0xda, 0xd4, 0x0e};
    EXPECT_THAT(Util::Base64::decode("/FYt2tQO"), Eq(binary6));

    std::vector<unsigned char> binary7 = {0x29, 0xb2, 0x32, 0x2e, 0x88, 0x41, 0xe8};
    EXPECT_THAT(Util::Base64::decode("KbIyLohB6A=="), Eq(binary7));

    std::vector<unsigned char> binary8 = {0x0f, 0x0f, 0xce, 0xd9, 0x49, 0x7a, 0xaf, 0x92};
    EXPECT_THAT(Util::Base64::decode("Dw/O2Ul6r5I="), Eq(binary8));

    std::vector<unsigned char> binary9 = {0x27, 0x0f, 0xb1, 0x89, 0x82, 0x80, 0x0d, 0xa6, 0x40};
    EXPECT_THAT(Util::Base64::decode("Jw+xiYKADaZA"), Eq(binary9));
}
