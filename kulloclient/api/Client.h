// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from client.djinni

#pragma once

#include <memory>
#include <string>
#include <unordered_map>

namespace Kullo { namespace Api {

class Address;
class AsyncTask;
class ClientAddressExistsListener;
class ClientCheckCredentialsListener;
class ClientCreateSessionListener;
class ClientGenerateKeysListener;
class MasterKey;
class SessionListener;

/** A Client is the entry point to most of libkullo. */
class Client {
public:
    virtual ~Client() {}

    /** Constants for the use with versions() */
    static std::string const BOTAN;

    static std::string const BOOST;

    static std::string const JSONCPP;

    static std::string const LIBKULLO;

    static std::string const SMARTSQLITE;

    static std::string const SQLITE;

    /** Create a new Client instance. You will most probably only need one. */
    static std::shared_ptr<Client> create();

    /**
     * Opens a session for the given user. dbFilePath is the absolute path to the
     * database file, including the filename. The folder must exist, and it must
     * be possible for the current user to create files in it. The file itself is
     * created if it doesn't already exist.
     *
     * Attention: Don't ever re-use the same DB file for multiple accounts!
     */
    virtual std::shared_ptr<AsyncTask> createSessionAsync(const std::shared_ptr<Address> & address, const std::shared_ptr<MasterKey> & masterKey, const std::string & dbFilePath, const std::shared_ptr<SessionListener> & sessionListener, const std::shared_ptr<ClientCreateSessionListener> & listener) = 0;

    /** Check whether an address exists. */
    virtual std::shared_ptr<AsyncTask> addressExistsAsync(const std::shared_ptr<Address> & address, const std::shared_ptr<ClientAddressExistsListener> & listener) = 0;

    /** Check whether the master key is valid for the given address. */
    virtual std::shared_ptr<AsyncTask> checkCredentialsAsync(const std::shared_ptr<Address> & address, const std::shared_ptr<MasterKey> & masterKey, const std::shared_ptr<ClientCheckCredentialsListener> & listener) = 0;

    /** Generate new keys, which is the first step to registering an account. */
    virtual std::shared_ptr<AsyncTask> generateKeysAsync(const std::shared_ptr<ClientGenerateKeysListener> & listener) = 0;

    /** Returns pairs of <library name, version number> for the libraries used. */
    virtual std::unordered_map<std::string, std::string> versions() = 0;
};

} }  // namespace Kullo::Api
