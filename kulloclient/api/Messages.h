// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from messages.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace Kullo { namespace Api {

class Address;
class Delivery;
struct DateTime;

class Messages {
public:
    virtual ~Messages() {}

    /** Returns all messages for the given conversation */
    virtual std::vector<int64_t> allForConversation(int64_t convId) = 0;

    /**
     * Returns the message id of the latest record for the given sender address.
     * Returns -1 for addresses without a sender record.
     */
    virtual int64_t latestForSender(const std::shared_ptr<Address> & address) = 0;

    /** Deletes a message */
    virtual void remove(int64_t msgId) = 0;

    virtual int64_t conversation(int64_t msgId) = 0;

    virtual std::vector<std::shared_ptr<Delivery>> deliveryState(int64_t msgId) = 0;

    virtual bool isRead(int64_t msgId) = 0;

    /** returns true iff value changed in this call */
    virtual bool setRead(int64_t msgId, bool value) = 0;

    virtual bool isDone(int64_t msgId) = 0;

    /** returns true iff value changed in this call */
    virtual bool setDone(int64_t msgId, bool value) = 0;

    virtual DateTime dateSent(int64_t msgId) = 0;

    virtual DateTime dateReceived(int64_t msgId) = 0;

    virtual std::string text(int64_t msgId) = 0;

    /**
     * Escapes special characters and wraps links into 'a' tags
     *
     * An application using this must preserve the whitespace in the HTML code,
     * i.e. treat \n and \r\n as line breaks and not strip leading or trailing
     * spaces in lines.
     * This can be archived for example by wrapping this in a html block with
     * style "white-space: pre-wrap;".
     *
     * When includeKulloAddresses is true, Kullo addresses are linked using the
     * Kullo internal scheme "kulloInternal:" followed by the unescaped address.
     * Those links must be handled by the Kullo client and must not be passed to
     * other applications since the URI scheme is not standardized and the hash
     * symbol is not compatible with a lot of applications.
     *
     * Web links are prioritized over Kullo address links and links do not overlap.
     */
    virtual std::string textAsHtml(int64_t msgId, bool includeKulloAddresses) = 0;

    virtual std::string footer(int64_t msgId) = 0;
};

} }  // namespace Kullo::Api
