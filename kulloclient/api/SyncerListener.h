// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from syncer.djinni

#pragma once

#include <cstdint>

namespace Kullo { namespace Api {

enum class DraftPart;
enum class NetworkError;
struct SyncProgress;

/** Listener used in Syncer */
class SyncerListener {
public:
    virtual ~SyncerListener() {}

    /** Called when the syncer's state changes from idle to syncing. */
    virtual void started() = 0;

    /**
     * Called when a part of a draft that should be sent is too big.
     * The syncer will continue syncing the other requested items.
     */
    virtual void draftPartTooBig(int64_t convId, DraftPart part, int64_t currentSize, int64_t maxSize) = 0;

    /** Called to inform about the progress of the current sync */
    virtual void progressed(const SyncProgress & progress) = 0;

    /**
     * Called when all requested syncs have finished. Not called when error() is
     * called.
     */
    virtual void finished() = 0;

    /**
     * Called when an error occurred during syncing which makes continuing the
     * sync impossible.
     */
    virtual void error(NetworkError error) = 0;
};

} }  // namespace Kullo::Api
