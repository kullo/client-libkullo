// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from usersettings.djinni

#pragma once

#include <boost/optional.hpp>
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace Kullo { namespace Api {

class Address;
class MasterKey;
struct DateTime;

/** Settings specific to the local user */
class UserSettings {
public:
    virtual ~UserSettings() {}

    /** Kullo address (e.g. "john.doe#kullo.net") */
    virtual std::shared_ptr<Address> address() = 0;

    virtual std::shared_ptr<MasterKey> masterKey() = 0;

    /** Real name (e.g. "John Doe"). Defaults to "". */
    virtual std::string name() = 0;

    virtual void setName(const std::string & name) = 0;

    /** Organization (e.g. "Doe Inc."). Defaults to "". */
    virtual std::string organization() = 0;

    virtual void setOrganization(const std::string & organization) = 0;

    /** Message footer (e.g. "42 Doe Ave., Doetown 12345"). Defaults to "". */
    virtual std::string footer() = 0;

    virtual void setFooter(const std::string & footer) = 0;

    /** MIME type of the avatar (e.g. "image/jpeg"). Defaults to "". */
    virtual std::string avatarMimeType() = 0;

    virtual void setAvatarMimeType(const std::string & mimeType) = 0;

    /**
     * Binary contents of the avatar image file of type avatarMimeType.
     * Defaults to a zero-length vector.
     */
    virtual std::vector<uint8_t> avatar() = 0;

    virtual void setAvatar(const std::vector<uint8_t> & avatar) = 0;

    /**
     * When to show the next backup reminder. Returns null if no reminder date
     * is set. Defaults to a date in the past.
     */
    virtual boost::optional<DateTime> nextMasterKeyBackupReminder() = 0;

    virtual void setNextMasterKeyBackupReminder(const boost::optional<DateTime> & reminderDate) = 0;
};

} }  // namespace Kullo::Api
