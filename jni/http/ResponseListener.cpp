// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from http.djinni

#include "ResponseListener.h"  // my header
#include "ProgressResult.h"
#include "jni/support-lib/jni/Marshal.hpp"

namespace JNI { namespace Kullo { namespace Http {

ResponseListener::ResponseListener() : ::djinni::JniInterface<::Kullo::Http::ResponseListener, ResponseListener>("net/kullo/libkullo/http/ResponseListener$CppProxy") {}

ResponseListener::~ResponseListener() = default;


CJNIEXPORT void JNICALL Java_net_kullo_libkullo_http_ResponseListener_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<djinni::CppProxyHandle<::Kullo::Http::ResponseListener>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_net_kullo_libkullo_http_ResponseListener_00024CppProxy_native_1progress(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jlong j_uploadTransferred, jlong j_uploadTotal, jlong j_downloadTransferred, jlong j_downloadTotal)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::CppProxyHandle<::Kullo::Http::ResponseListener>::get(nativeRef);
        auto r = ref->progress(::djinni::I64::toCpp(jniEnv, j_uploadTransferred),
                               ::djinni::I64::toCpp(jniEnv, j_uploadTotal),
                               ::djinni::I64::toCpp(jniEnv, j_downloadTransferred),
                               ::djinni::I64::toCpp(jniEnv, j_downloadTotal));
        return ::djinni::release(::JNI::Kullo::Http::ProgressResult::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_net_kullo_libkullo_http_ResponseListener_00024CppProxy_native_1dataReceived(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jbyteArray j_data)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::CppProxyHandle<::Kullo::Http::ResponseListener>::get(nativeRef);
        ref->dataReceived(::djinni::Binary::toCpp(jniEnv, j_data));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

} } }  // namespace JNI::Kullo::Http
