// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from http.djinni

#include "HttpClientFactory.h"  // my header
#include "HttpClient.h"
#include "jni/support-lib/jni/Marshal.hpp"

namespace JNI { namespace Kullo { namespace Http {

HttpClientFactory::HttpClientFactory() : ::djinni::JniInterface<::Kullo::Http::HttpClientFactory, HttpClientFactory>() {}

HttpClientFactory::~HttpClientFactory() = default;

HttpClientFactory::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

HttpClientFactory::JavaProxy::~JavaProxy() = default;

std::shared_ptr<::Kullo::Http::HttpClient> HttpClientFactory::JavaProxy::createHttpClient() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::JNI::Kullo::Http::HttpClientFactory>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_createHttpClient);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::JNI::Kullo::Http::HttpClient::toCpp(jniEnv, jret);
}
std::unordered_map<std::string, std::string> HttpClientFactory::JavaProxy::versions() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::JNI::Kullo::Http::HttpClientFactory>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_versions);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Map<::djinni::String, ::djinni::String>::toCpp(jniEnv, jret);
}

} } }  // namespace JNI::Kullo::Http
