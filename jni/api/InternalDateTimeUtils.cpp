// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from datetime.djinni

#include "InternalDateTimeUtils.h"  // my header
#include "DateTime.h"
#include "jni/support-lib/jni/Marshal.hpp"

namespace JNI { namespace Kullo { namespace Api {

InternalDateTimeUtils::InternalDateTimeUtils() : ::djinni::JniInterface<::Kullo::Api::InternalDateTimeUtils, InternalDateTimeUtils>("net/kullo/libkullo/api/InternalDateTimeUtils$CppProxy") {}

InternalDateTimeUtils::~InternalDateTimeUtils() = default;


CJNIEXPORT void JNICALL Java_net_kullo_libkullo_api_InternalDateTimeUtils_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::Kullo::Api::InternalDateTimeUtils>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jboolean JNICALL Java_net_kullo_libkullo_api_InternalDateTimeUtils_isValid(JNIEnv* jniEnv, jobject /*this*/, jshort j_year, jbyte j_month, jbyte j_day, jbyte j_hour, jbyte j_minute, jbyte j_second, jshort j_tzOffsetMinutes)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::Kullo::Api::InternalDateTimeUtils::isValid(::djinni::I16::toCpp(jniEnv, j_year),
                                                              ::djinni::I8::toCpp(jniEnv, j_month),
                                                              ::djinni::I8::toCpp(jniEnv, j_day),
                                                              ::djinni::I8::toCpp(jniEnv, j_hour),
                                                              ::djinni::I8::toCpp(jniEnv, j_minute),
                                                              ::djinni::I8::toCpp(jniEnv, j_second),
                                                              ::djinni::I16::toCpp(jniEnv, j_tzOffsetMinutes));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_net_kullo_libkullo_api_InternalDateTimeUtils_nowUtc(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::Kullo::Api::InternalDateTimeUtils::nowUtc();
        return ::djinni::release(::JNI::Kullo::Api::DateTime::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_net_kullo_libkullo_api_InternalDateTimeUtils_toString(JNIEnv* jniEnv, jobject /*this*/, jobject j_dateTime)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::Kullo::Api::InternalDateTimeUtils::toString(::JNI::Kullo::Api::DateTime::toCpp(jniEnv, j_dateTime));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jbyte JNICALL Java_net_kullo_libkullo_api_InternalDateTimeUtils_compare(JNIEnv* jniEnv, jobject /*this*/, jobject j_lhs, jobject j_rhs)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::Kullo::Api::InternalDateTimeUtils::compare(::JNI::Kullo::Api::DateTime::toCpp(jniEnv, j_lhs),
                                                              ::JNI::Kullo::Api::DateTime::toCpp(jniEnv, j_rhs));
        return ::djinni::release(::djinni::I8::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

} } }  // namespace JNI::Kullo::Api
