// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from drafts.djinni

#include "DraftAttachmentsAddListener.h"  // my header
#include "LocalError.h"
#include "jni/support-lib/jni/Marshal.hpp"

namespace JNI { namespace Kullo { namespace Api {

DraftAttachmentsAddListener::DraftAttachmentsAddListener() : ::djinni::JniInterface<::Kullo::Api::DraftAttachmentsAddListener, DraftAttachmentsAddListener>() {}

DraftAttachmentsAddListener::~DraftAttachmentsAddListener() = default;

DraftAttachmentsAddListener::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

DraftAttachmentsAddListener::JavaProxy::~JavaProxy() = default;

void DraftAttachmentsAddListener::JavaProxy::progressed(int64_t c_convId, int64_t c_attId, int64_t c_bytesProcessed, int64_t c_bytesTotal) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::JNI::Kullo::Api::DraftAttachmentsAddListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_progressed,
                           ::djinni::get(::djinni::I64::fromCpp(jniEnv, c_convId)),
                           ::djinni::get(::djinni::I64::fromCpp(jniEnv, c_attId)),
                           ::djinni::get(::djinni::I64::fromCpp(jniEnv, c_bytesProcessed)),
                           ::djinni::get(::djinni::I64::fromCpp(jniEnv, c_bytesTotal)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void DraftAttachmentsAddListener::JavaProxy::finished(int64_t c_convId, int64_t c_attId, const std::string & c_path) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::JNI::Kullo::Api::DraftAttachmentsAddListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_finished,
                           ::djinni::get(::djinni::I64::fromCpp(jniEnv, c_convId)),
                           ::djinni::get(::djinni::I64::fromCpp(jniEnv, c_attId)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void DraftAttachmentsAddListener::JavaProxy::error(int64_t c_convId, const std::string & c_path, ::Kullo::Api::LocalError c_error) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::JNI::Kullo::Api::DraftAttachmentsAddListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_error,
                           ::djinni::get(::djinni::I64::fromCpp(jniEnv, c_convId)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)),
                           ::djinni::get(::JNI::Kullo::Api::LocalError::fromCpp(jniEnv, c_error)));
    ::djinni::jniExceptionCheck(jniEnv);
}

} } }  // namespace JNI::Kullo::Api
