// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from session.djinni

#pragma once

#include "jni/support-lib/jni/djinni_support.hpp"
#include "kulloclient/api/SessionListener.h"
#include <kulloclient/nn.h>

namespace JNI { namespace Kullo { namespace Api {

class SessionListener final : ::djinni::JniInterface<::Kullo::Api::SessionListener, SessionListener> {
public:
    using CppType = ::Kullo::nn_shared_ptr<::Kullo::Api::SessionListener>;
    using CppOptType = std::shared_ptr<::Kullo::Api::SessionListener>;
    using JniType = jobject;

    using Boxed = SessionListener;

    ~SessionListener();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) {
        DJINNI_ASSERT_MSG(j, jniEnv, "SessionListener::fromCpp requires a non-null Java object");
        return kulloForcedNn(::djinni::JniClass<SessionListener>::get()._fromJava(jniEnv, j));
    };
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<SessionListener>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    SessionListener();
    friend ::djinni::JniClass<SessionListener>;
    friend ::djinni::JniInterface<::Kullo::Api::SessionListener, SessionListener>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::Kullo::Api::SessionListener
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void internalEvent(const ::Kullo::nn_shared_ptr<::Kullo::Api::InternalEvent> & event) override;

    private:
        friend ::djinni::JniInterface<::Kullo::Api::SessionListener, ::JNI::Kullo::Api::SessionListener>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("net/kullo/libkullo/api/SessionListener") };
    const jmethodID method_internalEvent { ::djinni::jniGetMethodID(clazz.get(), "internalEvent", "(Lnet/kullo/libkullo/api/InternalEvent;)V") };
};

} } }  // namespace JNI::Kullo::Api
