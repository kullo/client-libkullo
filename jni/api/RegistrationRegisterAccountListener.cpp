// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from registration.djinni

#include "RegistrationRegisterAccountListener.h"  // my header
#include "Address.h"
#include "AddressNotAvailableReason.h"
#include "Challenge.h"
#include "MasterKey.h"
#include "NetworkError.h"

namespace JNI { namespace Kullo { namespace Api {

RegistrationRegisterAccountListener::RegistrationRegisterAccountListener() : ::djinni::JniInterface<::Kullo::Api::RegistrationRegisterAccountListener, RegistrationRegisterAccountListener>() {}

RegistrationRegisterAccountListener::~RegistrationRegisterAccountListener() = default;

RegistrationRegisterAccountListener::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

RegistrationRegisterAccountListener::JavaProxy::~JavaProxy() = default;

void RegistrationRegisterAccountListener::JavaProxy::challengeNeeded(const ::Kullo::Api::Address & c_address, const ::Kullo::nn_shared_ptr<::Kullo::Api::Challenge> & c_challenge) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::JNI::Kullo::Api::RegistrationRegisterAccountListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_challengeNeeded,
                           ::djinni::get(::JNI::Kullo::Api::Address::fromCpp(jniEnv, c_address)),
                           ::djinni::get(::JNI::Kullo::Api::Challenge::fromCpp(jniEnv, c_challenge)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void RegistrationRegisterAccountListener::JavaProxy::addressNotAvailable(const ::Kullo::Api::Address & c_address, ::Kullo::Api::AddressNotAvailableReason c_reason) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::JNI::Kullo::Api::RegistrationRegisterAccountListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_addressNotAvailable,
                           ::djinni::get(::JNI::Kullo::Api::Address::fromCpp(jniEnv, c_address)),
                           ::djinni::get(::JNI::Kullo::Api::AddressNotAvailableReason::fromCpp(jniEnv, c_reason)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void RegistrationRegisterAccountListener::JavaProxy::finished(const ::Kullo::Api::Address & c_address, const ::Kullo::Api::MasterKey & c_masterKey) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::JNI::Kullo::Api::RegistrationRegisterAccountListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_finished,
                           ::djinni::get(::JNI::Kullo::Api::Address::fromCpp(jniEnv, c_address)),
                           ::djinni::get(::JNI::Kullo::Api::MasterKey::fromCpp(jniEnv, c_masterKey)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void RegistrationRegisterAccountListener::JavaProxy::error(const ::Kullo::Api::Address & c_address, ::Kullo::Api::NetworkError c_error) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::JNI::Kullo::Api::RegistrationRegisterAccountListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_error,
                           ::djinni::get(::JNI::Kullo::Api::Address::fromCpp(jniEnv, c_address)),
                           ::djinni::get(::JNI::Kullo::Api::NetworkError::fromCpp(jniEnv, c_error)));
    ::djinni::jniExceptionCheck(jniEnv);
}

} } }  // namespace JNI::Kullo::Api
