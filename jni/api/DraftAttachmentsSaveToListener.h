// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from drafts.djinni

#pragma once

#include "jni/support-lib/jni/djinni_support.hpp"
#include "kulloclient/api/DraftAttachmentsSaveToListener.h"
#include <kulloclient/nn.h>

namespace JNI { namespace Kullo { namespace Api {

class DraftAttachmentsSaveToListener final : ::djinni::JniInterface<::Kullo::Api::DraftAttachmentsSaveToListener, DraftAttachmentsSaveToListener> {
public:
    using CppType = ::Kullo::nn_shared_ptr<::Kullo::Api::DraftAttachmentsSaveToListener>;
    using CppOptType = std::shared_ptr<::Kullo::Api::DraftAttachmentsSaveToListener>;
    using JniType = jobject;

    using Boxed = DraftAttachmentsSaveToListener;

    ~DraftAttachmentsSaveToListener();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) {
        DJINNI_ASSERT_MSG(j, jniEnv, "DraftAttachmentsSaveToListener::fromCpp requires a non-null Java object");
        return kulloForcedNn(::djinni::JniClass<DraftAttachmentsSaveToListener>::get()._fromJava(jniEnv, j));
    };
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<DraftAttachmentsSaveToListener>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    DraftAttachmentsSaveToListener();
    friend ::djinni::JniClass<DraftAttachmentsSaveToListener>;
    friend ::djinni::JniInterface<::Kullo::Api::DraftAttachmentsSaveToListener, DraftAttachmentsSaveToListener>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::Kullo::Api::DraftAttachmentsSaveToListener
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void finished(int64_t convId, int64_t attId, const std::string & path) override;
        void error(int64_t convId, int64_t attId, const std::string & path, ::Kullo::Api::LocalError error) override;

    private:
        friend ::djinni::JniInterface<::Kullo::Api::DraftAttachmentsSaveToListener, ::JNI::Kullo::Api::DraftAttachmentsSaveToListener>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("net/kullo/libkullo/api/DraftAttachmentsSaveToListener") };
    const jmethodID method_finished { ::djinni::jniGetMethodID(clazz.get(), "finished", "(JJLjava/lang/String;)V") };
    const jmethodID method_error { ::djinni::jniGetMethodID(clazz.get(), "error", "(JJLjava/lang/String;Lnet/kullo/libkullo/api/LocalError;)V") };
};

} } }  // namespace JNI::Kullo::Api
