// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from log.djinni

#include "LogListener.h"  // my header
#include "LogType.h"
#include "jni/support-lib/jni/Marshal.hpp"

namespace JNI { namespace Kullo { namespace Api {

LogListener::LogListener() : ::djinni::JniInterface<::Kullo::Api::LogListener, LogListener>() {}

LogListener::~LogListener() = default;

LogListener::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

LogListener::JavaProxy::~JavaProxy() = default;

void LogListener::JavaProxy::writeLogMessage(const std::string & c_file, int32_t c_line, const std::string & c_function, ::Kullo::Api::LogType c_type, const std::string & c_message, const std::string & c_thread, const std::string & c_stacktrace) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::JNI::Kullo::Api::LogListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_writeLogMessage,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_file)),
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_line)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_function)),
                           ::djinni::get(::JNI::Kullo::Api::LogType::fromCpp(jniEnv, c_type)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_message)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_thread)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_stacktrace)));
    ::djinni::jniExceptionCheck(jniEnv);
}

} } }  // namespace JNI::Kullo::Api
