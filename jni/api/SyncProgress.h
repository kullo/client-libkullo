// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from api.djinni

#pragma once

#include "jni/support-lib/jni/djinni_support.hpp"
#include "kulloclient/api/SyncProgress.h"

namespace JNI { namespace Kullo { namespace Api {

class SyncProgress final {
public:
    using CppType = ::Kullo::Api::SyncProgress;
    using JniType = jobject;

    using Boxed = SyncProgress;

    ~SyncProgress();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    SyncProgress();
    friend ::djinni::JniClass<SyncProgress>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("net/kullo/libkullo/api/SyncProgress") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(JJJJJJJJ)V") };
    const jfieldID field_countLeft { ::djinni::jniGetFieldID(clazz.get(), "countLeft", "J") };
    const jfieldID field_countProcessed { ::djinni::jniGetFieldID(clazz.get(), "countProcessed", "J") };
    const jfieldID field_countTotal { ::djinni::jniGetFieldID(clazz.get(), "countTotal", "J") };
    const jfieldID field_countNew { ::djinni::jniGetFieldID(clazz.get(), "countNew", "J") };
    const jfieldID field_countNewUnread { ::djinni::jniGetFieldID(clazz.get(), "countNewUnread", "J") };
    const jfieldID field_countModified { ::djinni::jniGetFieldID(clazz.get(), "countModified", "J") };
    const jfieldID field_countDeleted { ::djinni::jniGetFieldID(clazz.get(), "countDeleted", "J") };
    const jfieldID field_runTimeMs { ::djinni::jniGetFieldID(clazz.get(), "runTimeMs", "J") };
};

} } }  // namespace JNI::Kullo::Api
