// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from syncer.djinni

#pragma once

#include "jni/support-lib/jni/djinni_support.hpp"
#include "kulloclient/api/SyncerListener.h"

namespace JNI { namespace Kullo { namespace Api {

class SyncerListener final : ::djinni::JniInterface<::Kullo::Api::SyncerListener, SyncerListener> {
public:
    using CppType = std::shared_ptr<::Kullo::Api::SyncerListener>;
    using CppOptType = std::shared_ptr<::Kullo::Api::SyncerListener>;
    using JniType = jobject;

    using Boxed = SyncerListener;

    ~SyncerListener();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<SyncerListener>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<SyncerListener>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    SyncerListener();
    friend ::djinni::JniClass<SyncerListener>;
    friend ::djinni::JniInterface<::Kullo::Api::SyncerListener, SyncerListener>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::Kullo::Api::SyncerListener
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void started() override;
        void draftPartTooBig(int64_t convId, ::Kullo::Api::DraftPart part, int64_t currentSize, int64_t maxSize) override;
        void progressed(const ::Kullo::Api::SyncProgress & progress) override;
        void finished() override;
        void error(::Kullo::Api::NetworkError error) override;

    private:
        friend ::djinni::JniInterface<::Kullo::Api::SyncerListener, ::JNI::Kullo::Api::SyncerListener>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("net/kullo/libkullo/api/SyncerListener") };
    const jmethodID method_started { ::djinni::jniGetMethodID(clazz.get(), "started", "()V") };
    const jmethodID method_draftPartTooBig { ::djinni::jniGetMethodID(clazz.get(), "draftPartTooBig", "(JLnet/kullo/libkullo/api/DraftPart;JJ)V") };
    const jmethodID method_progressed { ::djinni::jniGetMethodID(clazz.get(), "progressed", "(Lnet/kullo/libkullo/api/SyncProgress;)V") };
    const jmethodID method_finished { ::djinni::jniGetMethodID(clazz.get(), "finished", "()V") };
    const jmethodID method_error { ::djinni::jniGetMethodID(clazz.get(), "error", "(Lnet/kullo/libkullo/api/NetworkError;)V") };
};

} } }  // namespace JNI::Kullo::Api
