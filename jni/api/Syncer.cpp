// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from api.djinni

#include "Syncer.h"  // my header
#include "AsyncTask.h"
#include "SyncMode.h"
#include "SyncerRunListener.h"
#include "jni/support-lib/jni/Marshal.hpp"

namespace JNI { namespace Kullo { namespace Api {

Syncer::Syncer() : ::djinni::JniInterface<::Kullo::Api::Syncer, Syncer>("net/kullo/libkullo/api/Syncer$CppProxy") {}

Syncer::~Syncer() = default;


CJNIEXPORT void JNICALL Java_net_kullo_libkullo_api_Syncer_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<djinni::CppProxyHandle<::Kullo::Api::Syncer>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_net_kullo_libkullo_api_Syncer_00024CppProxy_native_1runAsync(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_mode, jobject j_listener)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::CppProxyHandle<::Kullo::Api::Syncer>::get(nativeRef);
        auto r = ref->runAsync(::JNI::Kullo::Api::SyncMode::toCpp(jniEnv, j_mode),
                               ::JNI::Kullo::Api::SyncerRunListener::toCpp(jniEnv, j_listener));
        return ::djinni::release(::JNI::Kullo::Api::AsyncTask::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_net_kullo_libkullo_api_Syncer_00024CppProxy_native_1downloadAttachmentsForMessageAsync(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jlong j_msgId, jobject j_listener)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::CppProxyHandle<::Kullo::Api::Syncer>::get(nativeRef);
        auto r = ref->downloadAttachmentsForMessageAsync(::djinni::I64::toCpp(jniEnv, j_msgId),
                                                         ::JNI::Kullo::Api::SyncerRunListener::toCpp(jniEnv, j_listener));
        return ::djinni::release(::JNI::Kullo::Api::AsyncTask::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

} } }  // namespace JNI::Kullo::Api
